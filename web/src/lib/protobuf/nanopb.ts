/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: nanopb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/descriptor";
import * as pb_1 from "google-protobuf";
export enum FieldType {
    FT_DEFAULT = 0,
    FT_CALLBACK = 1,
    FT_POINTER = 4,
    FT_STATIC = 2,
    FT_IGNORE = 3,
    FT_INLINE = 5
}
export enum IntSize {
    IS_DEFAULT = 0,
    IS_8 = 8,
    IS_16 = 16,
    IS_32 = 32,
    IS_64 = 64
}
export enum TypenameMangling {
    M_NONE = 0,
    M_STRIP_PACKAGE = 1,
    M_FLATTEN = 2,
    M_PACKAGE_INITIALS = 3
}
export enum DescriptorSize {
    DS_AUTO = 0,
    DS_1 = 1,
    DS_2 = 2,
    DS_4 = 4,
    DS_8 = 8
}
export class NanoPBOptions extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        max_size?: number;
        max_length?: number;
        max_count?: number;
        int_size?: IntSize;
        enum_intsize?: IntSize;
        type?: FieldType;
        long_names?: boolean;
        packed_struct?: boolean;
        packed_enum?: boolean;
        skip_message?: boolean;
        no_unions?: boolean;
        msgid?: number;
        anonymous_oneof?: boolean;
        proto3?: boolean;
        proto3_singular_msgs?: boolean;
        enum_to_string?: boolean;
        enum_validate?: boolean;
        fixed_length?: boolean;
        fixed_count?: boolean;
        submsg_callback?: boolean;
        mangle_names?: TypenameMangling;
        callback_datatype?: string;
        callback_function?: string;
        descriptorsize?: DescriptorSize;
        default_has?: boolean;
        include: string[];
        exclude: string[];
        package?: string;
        type_override?: dependency_1.google.protobuf.FieldDescriptorProto.Type;
        label_override?: dependency_1.google.protobuf.FieldDescriptorProto.Label;
        sort_by_tag?: boolean;
        fallback_type?: FieldType;
        initializer?: string;
        discard_unused_automatic_types?: boolean;
        discard_deprecated?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [24, 26], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("max_size" in data && data.max_size != undefined) {
                this.max_size = data.max_size;
            }
            if ("max_length" in data && data.max_length != undefined) {
                this.max_length = data.max_length;
            }
            if ("max_count" in data && data.max_count != undefined) {
                this.max_count = data.max_count;
            }
            if ("int_size" in data && data.int_size != undefined) {
                this.int_size = data.int_size;
            }
            if ("enum_intsize" in data && data.enum_intsize != undefined) {
                this.enum_intsize = data.enum_intsize;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("long_names" in data && data.long_names != undefined) {
                this.long_names = data.long_names;
            }
            if ("packed_struct" in data && data.packed_struct != undefined) {
                this.packed_struct = data.packed_struct;
            }
            if ("packed_enum" in data && data.packed_enum != undefined) {
                this.packed_enum = data.packed_enum;
            }
            if ("skip_message" in data && data.skip_message != undefined) {
                this.skip_message = data.skip_message;
            }
            if ("no_unions" in data && data.no_unions != undefined) {
                this.no_unions = data.no_unions;
            }
            if ("msgid" in data && data.msgid != undefined) {
                this.msgid = data.msgid;
            }
            if ("anonymous_oneof" in data && data.anonymous_oneof != undefined) {
                this.anonymous_oneof = data.anonymous_oneof;
            }
            if ("proto3" in data && data.proto3 != undefined) {
                this.proto3 = data.proto3;
            }
            if ("proto3_singular_msgs" in data && data.proto3_singular_msgs != undefined) {
                this.proto3_singular_msgs = data.proto3_singular_msgs;
            }
            if ("enum_to_string" in data && data.enum_to_string != undefined) {
                this.enum_to_string = data.enum_to_string;
            }
            if ("enum_validate" in data && data.enum_validate != undefined) {
                this.enum_validate = data.enum_validate;
            }
            if ("fixed_length" in data && data.fixed_length != undefined) {
                this.fixed_length = data.fixed_length;
            }
            if ("fixed_count" in data && data.fixed_count != undefined) {
                this.fixed_count = data.fixed_count;
            }
            if ("submsg_callback" in data && data.submsg_callback != undefined) {
                this.submsg_callback = data.submsg_callback;
            }
            if ("mangle_names" in data && data.mangle_names != undefined) {
                this.mangle_names = data.mangle_names;
            }
            if ("callback_datatype" in data && data.callback_datatype != undefined) {
                this.callback_datatype = data.callback_datatype;
            }
            if ("callback_function" in data && data.callback_function != undefined) {
                this.callback_function = data.callback_function;
            }
            if ("descriptorsize" in data && data.descriptorsize != undefined) {
                this.descriptorsize = data.descriptorsize;
            }
            if ("default_has" in data && data.default_has != undefined) {
                this.default_has = data.default_has;
            }
            this.include = data.include;
            this.exclude = data.exclude;
            if ("package" in data && data.package != undefined) {
                this.package = data.package;
            }
            if ("type_override" in data && data.type_override != undefined) {
                this.type_override = data.type_override;
            }
            if ("label_override" in data && data.label_override != undefined) {
                this.label_override = data.label_override;
            }
            if ("sort_by_tag" in data && data.sort_by_tag != undefined) {
                this.sort_by_tag = data.sort_by_tag;
            }
            if ("fallback_type" in data && data.fallback_type != undefined) {
                this.fallback_type = data.fallback_type;
            }
            if ("initializer" in data && data.initializer != undefined) {
                this.initializer = data.initializer;
            }
            if ("discard_unused_automatic_types" in data && data.discard_unused_automatic_types != undefined) {
                this.discard_unused_automatic_types = data.discard_unused_automatic_types;
            }
            if ("discard_deprecated" in data && data.discard_deprecated != undefined) {
                this.discard_deprecated = data.discard_deprecated;
            }
        }
    }
    get max_size() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set max_size(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get has_max_size() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get max_length() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set max_length(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get has_max_length() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get max_count() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set max_count(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get has_max_count() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get int_size() {
        return pb_1.Message.getFieldWithDefault(this, 7, IntSize.IS_DEFAULT) as IntSize;
    }
    set int_size(value: IntSize) {
        pb_1.Message.setField(this, 7, value);
    }
    get has_int_size() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get enum_intsize() {
        return pb_1.Message.getFieldWithDefault(this, 34, IntSize.IS_DEFAULT) as IntSize;
    }
    set enum_intsize(value: IntSize) {
        pb_1.Message.setField(this, 34, value);
    }
    get has_enum_intsize() {
        return pb_1.Message.getField(this, 34) != null;
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 3, FieldType.FT_DEFAULT) as FieldType;
    }
    set type(value: FieldType) {
        pb_1.Message.setField(this, 3, value);
    }
    get has_type() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get long_names() {
        return pb_1.Message.getFieldWithDefault(this, 4, true) as boolean;
    }
    set long_names(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get has_long_names() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get packed_struct() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set packed_struct(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get has_packed_struct() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get packed_enum() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set packed_enum(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get has_packed_enum() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get skip_message() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set skip_message(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get has_skip_message() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get no_unions() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set no_unions(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get has_no_unions() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get msgid() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set msgid(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get has_msgid() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get anonymous_oneof() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set anonymous_oneof(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    get has_anonymous_oneof() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get proto3() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set proto3(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get has_proto3() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get proto3_singular_msgs() {
        return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
    }
    set proto3_singular_msgs(value: boolean) {
        pb_1.Message.setField(this, 21, value);
    }
    get has_proto3_singular_msgs() {
        return pb_1.Message.getField(this, 21) != null;
    }
    get enum_to_string() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set enum_to_string(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    get has_enum_to_string() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get enum_validate() {
        return pb_1.Message.getFieldWithDefault(this, 32, false) as boolean;
    }
    set enum_validate(value: boolean) {
        pb_1.Message.setField(this, 32, value);
    }
    get has_enum_validate() {
        return pb_1.Message.getField(this, 32) != null;
    }
    get fixed_length() {
        return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
    }
    set fixed_length(value: boolean) {
        pb_1.Message.setField(this, 15, value);
    }
    get has_fixed_length() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get fixed_count() {
        return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
    }
    set fixed_count(value: boolean) {
        pb_1.Message.setField(this, 16, value);
    }
    get has_fixed_count() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get submsg_callback() {
        return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
    }
    set submsg_callback(value: boolean) {
        pb_1.Message.setField(this, 22, value);
    }
    get has_submsg_callback() {
        return pb_1.Message.getField(this, 22) != null;
    }
    get mangle_names() {
        return pb_1.Message.getFieldWithDefault(this, 17, TypenameMangling.M_NONE) as TypenameMangling;
    }
    set mangle_names(value: TypenameMangling) {
        pb_1.Message.setField(this, 17, value);
    }
    get has_mangle_names() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get callback_datatype() {
        return pb_1.Message.getFieldWithDefault(this, 18, "pb_callback_t") as string;
    }
    set callback_datatype(value: string) {
        pb_1.Message.setField(this, 18, value);
    }
    get has_callback_datatype() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get callback_function() {
        return pb_1.Message.getFieldWithDefault(this, 19, "pb_default_field_callback") as string;
    }
    set callback_function(value: string) {
        pb_1.Message.setField(this, 19, value);
    }
    get has_callback_function() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get descriptorsize() {
        return pb_1.Message.getFieldWithDefault(this, 20, DescriptorSize.DS_AUTO) as DescriptorSize;
    }
    set descriptorsize(value: DescriptorSize) {
        pb_1.Message.setField(this, 20, value);
    }
    get has_descriptorsize() {
        return pb_1.Message.getField(this, 20) != null;
    }
    get default_has() {
        return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
    }
    set default_has(value: boolean) {
        pb_1.Message.setField(this, 23, value);
    }
    get has_default_has() {
        return pb_1.Message.getField(this, 23) != null;
    }
    get include() {
        return pb_1.Message.getFieldWithDefault(this, 24, []) as string[];
    }
    set include(value: string[]) {
        pb_1.Message.setField(this, 24, value);
    }
    get exclude() {
        return pb_1.Message.getFieldWithDefault(this, 26, []) as string[];
    }
    set exclude(value: string[]) {
        pb_1.Message.setField(this, 26, value);
    }
    get package() {
        return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
    }
    set package(value: string) {
        pb_1.Message.setField(this, 25, value);
    }
    get has_package() {
        return pb_1.Message.getField(this, 25) != null;
    }
    get type_override() {
        return pb_1.Message.getFieldWithDefault(this, 27, dependency_1.google.protobuf.FieldDescriptorProto.Type.TYPE_DOUBLE) as dependency_1.google.protobuf.FieldDescriptorProto.Type;
    }
    set type_override(value: dependency_1.google.protobuf.FieldDescriptorProto.Type) {
        pb_1.Message.setField(this, 27, value);
    }
    get has_type_override() {
        return pb_1.Message.getField(this, 27) != null;
    }
    get label_override() {
        return pb_1.Message.getFieldWithDefault(this, 31, dependency_1.google.protobuf.FieldDescriptorProto.Label.LABEL_OPTIONAL) as dependency_1.google.protobuf.FieldDescriptorProto.Label;
    }
    set label_override(value: dependency_1.google.protobuf.FieldDescriptorProto.Label) {
        pb_1.Message.setField(this, 31, value);
    }
    get has_label_override() {
        return pb_1.Message.getField(this, 31) != null;
    }
    get sort_by_tag() {
        return pb_1.Message.getFieldWithDefault(this, 28, true) as boolean;
    }
    set sort_by_tag(value: boolean) {
        pb_1.Message.setField(this, 28, value);
    }
    get has_sort_by_tag() {
        return pb_1.Message.getField(this, 28) != null;
    }
    get fallback_type() {
        return pb_1.Message.getFieldWithDefault(this, 29, FieldType.FT_CALLBACK) as FieldType;
    }
    set fallback_type(value: FieldType) {
        pb_1.Message.setField(this, 29, value);
    }
    get has_fallback_type() {
        return pb_1.Message.getField(this, 29) != null;
    }
    get initializer() {
        return pb_1.Message.getFieldWithDefault(this, 30, "") as string;
    }
    set initializer(value: string) {
        pb_1.Message.setField(this, 30, value);
    }
    get has_initializer() {
        return pb_1.Message.getField(this, 30) != null;
    }
    get discard_unused_automatic_types() {
        return pb_1.Message.getFieldWithDefault(this, 33, true) as boolean;
    }
    set discard_unused_automatic_types(value: boolean) {
        pb_1.Message.setField(this, 33, value);
    }
    get has_discard_unused_automatic_types() {
        return pb_1.Message.getField(this, 33) != null;
    }
    get discard_deprecated() {
        return pb_1.Message.getFieldWithDefault(this, 35, false) as boolean;
    }
    set discard_deprecated(value: boolean) {
        pb_1.Message.setField(this, 35, value);
    }
    get has_discard_deprecated() {
        return pb_1.Message.getField(this, 35) != null;
    }
    static fromObject(data: {
        max_size?: number;
        max_length?: number;
        max_count?: number;
        int_size?: IntSize;
        enum_intsize?: IntSize;
        type?: FieldType;
        long_names?: boolean;
        packed_struct?: boolean;
        packed_enum?: boolean;
        skip_message?: boolean;
        no_unions?: boolean;
        msgid?: number;
        anonymous_oneof?: boolean;
        proto3?: boolean;
        proto3_singular_msgs?: boolean;
        enum_to_string?: boolean;
        enum_validate?: boolean;
        fixed_length?: boolean;
        fixed_count?: boolean;
        submsg_callback?: boolean;
        mangle_names?: TypenameMangling;
        callback_datatype?: string;
        callback_function?: string;
        descriptorsize?: DescriptorSize;
        default_has?: boolean;
        include: string[];
        exclude: string[];
        package?: string;
        type_override?: dependency_1.google.protobuf.FieldDescriptorProto.Type;
        label_override?: dependency_1.google.protobuf.FieldDescriptorProto.Label;
        sort_by_tag?: boolean;
        fallback_type?: FieldType;
        initializer?: string;
        discard_unused_automatic_types?: boolean;
        discard_deprecated?: boolean;
    }): NanoPBOptions {
        const message = new NanoPBOptions({
            include: data.include,
            exclude: data.exclude
        });
        if (data.max_size != null) {
            message.max_size = data.max_size;
        }
        if (data.max_length != null) {
            message.max_length = data.max_length;
        }
        if (data.max_count != null) {
            message.max_count = data.max_count;
        }
        if (data.int_size != null) {
            message.int_size = data.int_size;
        }
        if (data.enum_intsize != null) {
            message.enum_intsize = data.enum_intsize;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.long_names != null) {
            message.long_names = data.long_names;
        }
        if (data.packed_struct != null) {
            message.packed_struct = data.packed_struct;
        }
        if (data.packed_enum != null) {
            message.packed_enum = data.packed_enum;
        }
        if (data.skip_message != null) {
            message.skip_message = data.skip_message;
        }
        if (data.no_unions != null) {
            message.no_unions = data.no_unions;
        }
        if (data.msgid != null) {
            message.msgid = data.msgid;
        }
        if (data.anonymous_oneof != null) {
            message.anonymous_oneof = data.anonymous_oneof;
        }
        if (data.proto3 != null) {
            message.proto3 = data.proto3;
        }
        if (data.proto3_singular_msgs != null) {
            message.proto3_singular_msgs = data.proto3_singular_msgs;
        }
        if (data.enum_to_string != null) {
            message.enum_to_string = data.enum_to_string;
        }
        if (data.enum_validate != null) {
            message.enum_validate = data.enum_validate;
        }
        if (data.fixed_length != null) {
            message.fixed_length = data.fixed_length;
        }
        if (data.fixed_count != null) {
            message.fixed_count = data.fixed_count;
        }
        if (data.submsg_callback != null) {
            message.submsg_callback = data.submsg_callback;
        }
        if (data.mangle_names != null) {
            message.mangle_names = data.mangle_names;
        }
        if (data.callback_datatype != null) {
            message.callback_datatype = data.callback_datatype;
        }
        if (data.callback_function != null) {
            message.callback_function = data.callback_function;
        }
        if (data.descriptorsize != null) {
            message.descriptorsize = data.descriptorsize;
        }
        if (data.default_has != null) {
            message.default_has = data.default_has;
        }
        if (data.package != null) {
            message.package = data.package;
        }
        if (data.type_override != null) {
            message.type_override = data.type_override;
        }
        if (data.label_override != null) {
            message.label_override = data.label_override;
        }
        if (data.sort_by_tag != null) {
            message.sort_by_tag = data.sort_by_tag;
        }
        if (data.fallback_type != null) {
            message.fallback_type = data.fallback_type;
        }
        if (data.initializer != null) {
            message.initializer = data.initializer;
        }
        if (data.discard_unused_automatic_types != null) {
            message.discard_unused_automatic_types = data.discard_unused_automatic_types;
        }
        if (data.discard_deprecated != null) {
            message.discard_deprecated = data.discard_deprecated;
        }
        return message;
    }
    toObject() {
        const data: {
            max_size?: number;
            max_length?: number;
            max_count?: number;
            int_size?: IntSize;
            enum_intsize?: IntSize;
            type?: FieldType;
            long_names?: boolean;
            packed_struct?: boolean;
            packed_enum?: boolean;
            skip_message?: boolean;
            no_unions?: boolean;
            msgid?: number;
            anonymous_oneof?: boolean;
            proto3?: boolean;
            proto3_singular_msgs?: boolean;
            enum_to_string?: boolean;
            enum_validate?: boolean;
            fixed_length?: boolean;
            fixed_count?: boolean;
            submsg_callback?: boolean;
            mangle_names?: TypenameMangling;
            callback_datatype?: string;
            callback_function?: string;
            descriptorsize?: DescriptorSize;
            default_has?: boolean;
            include: string[];
            exclude: string[];
            package?: string;
            type_override?: dependency_1.google.protobuf.FieldDescriptorProto.Type;
            label_override?: dependency_1.google.protobuf.FieldDescriptorProto.Label;
            sort_by_tag?: boolean;
            fallback_type?: FieldType;
            initializer?: string;
            discard_unused_automatic_types?: boolean;
            discard_deprecated?: boolean;
        } = {
            include: this.include,
            exclude: this.exclude
        };
        if (this.max_size != null) {
            data.max_size = this.max_size;
        }
        if (this.max_length != null) {
            data.max_length = this.max_length;
        }
        if (this.max_count != null) {
            data.max_count = this.max_count;
        }
        if (this.int_size != null) {
            data.int_size = this.int_size;
        }
        if (this.enum_intsize != null) {
            data.enum_intsize = this.enum_intsize;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.long_names != null) {
            data.long_names = this.long_names;
        }
        if (this.packed_struct != null) {
            data.packed_struct = this.packed_struct;
        }
        if (this.packed_enum != null) {
            data.packed_enum = this.packed_enum;
        }
        if (this.skip_message != null) {
            data.skip_message = this.skip_message;
        }
        if (this.no_unions != null) {
            data.no_unions = this.no_unions;
        }
        if (this.msgid != null) {
            data.msgid = this.msgid;
        }
        if (this.anonymous_oneof != null) {
            data.anonymous_oneof = this.anonymous_oneof;
        }
        if (this.proto3 != null) {
            data.proto3 = this.proto3;
        }
        if (this.proto3_singular_msgs != null) {
            data.proto3_singular_msgs = this.proto3_singular_msgs;
        }
        if (this.enum_to_string != null) {
            data.enum_to_string = this.enum_to_string;
        }
        if (this.enum_validate != null) {
            data.enum_validate = this.enum_validate;
        }
        if (this.fixed_length != null) {
            data.fixed_length = this.fixed_length;
        }
        if (this.fixed_count != null) {
            data.fixed_count = this.fixed_count;
        }
        if (this.submsg_callback != null) {
            data.submsg_callback = this.submsg_callback;
        }
        if (this.mangle_names != null) {
            data.mangle_names = this.mangle_names;
        }
        if (this.callback_datatype != null) {
            data.callback_datatype = this.callback_datatype;
        }
        if (this.callback_function != null) {
            data.callback_function = this.callback_function;
        }
        if (this.descriptorsize != null) {
            data.descriptorsize = this.descriptorsize;
        }
        if (this.default_has != null) {
            data.default_has = this.default_has;
        }
        if (this.package != null) {
            data.package = this.package;
        }
        if (this.type_override != null) {
            data.type_override = this.type_override;
        }
        if (this.label_override != null) {
            data.label_override = this.label_override;
        }
        if (this.sort_by_tag != null) {
            data.sort_by_tag = this.sort_by_tag;
        }
        if (this.fallback_type != null) {
            data.fallback_type = this.fallback_type;
        }
        if (this.initializer != null) {
            data.initializer = this.initializer;
        }
        if (this.discard_unused_automatic_types != null) {
            data.discard_unused_automatic_types = this.discard_unused_automatic_types;
        }
        if (this.discard_deprecated != null) {
            data.discard_deprecated = this.discard_deprecated;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_max_size)
            writer.writeInt32(1, this.max_size);
        if (this.has_max_length)
            writer.writeInt32(14, this.max_length);
        if (this.has_max_count)
            writer.writeInt32(2, this.max_count);
        if (this.has_int_size)
            writer.writeEnum(7, this.int_size);
        if (this.has_enum_intsize)
            writer.writeEnum(34, this.enum_intsize);
        if (this.has_type)
            writer.writeEnum(3, this.type);
        if (this.has_long_names)
            writer.writeBool(4, this.long_names);
        if (this.has_packed_struct)
            writer.writeBool(5, this.packed_struct);
        if (this.has_packed_enum)
            writer.writeBool(10, this.packed_enum);
        if (this.has_skip_message)
            writer.writeBool(6, this.skip_message);
        if (this.has_no_unions)
            writer.writeBool(8, this.no_unions);
        if (this.has_msgid)
            writer.writeUint32(9, this.msgid);
        if (this.has_anonymous_oneof)
            writer.writeBool(11, this.anonymous_oneof);
        if (this.has_proto3)
            writer.writeBool(12, this.proto3);
        if (this.has_proto3_singular_msgs)
            writer.writeBool(21, this.proto3_singular_msgs);
        if (this.has_enum_to_string)
            writer.writeBool(13, this.enum_to_string);
        if (this.has_enum_validate)
            writer.writeBool(32, this.enum_validate);
        if (this.has_fixed_length)
            writer.writeBool(15, this.fixed_length);
        if (this.has_fixed_count)
            writer.writeBool(16, this.fixed_count);
        if (this.has_submsg_callback)
            writer.writeBool(22, this.submsg_callback);
        if (this.has_mangle_names)
            writer.writeEnum(17, this.mangle_names);
        if (this.has_callback_datatype && this.callback_datatype.length)
            writer.writeString(18, this.callback_datatype);
        if (this.has_callback_function && this.callback_function.length)
            writer.writeString(19, this.callback_function);
        if (this.has_descriptorsize)
            writer.writeEnum(20, this.descriptorsize);
        if (this.has_default_has)
            writer.writeBool(23, this.default_has);
        if (this.include.length)
            writer.writeRepeatedString(24, this.include);
        if (this.exclude.length)
            writer.writeRepeatedString(26, this.exclude);
        if (this.has_package && this.package.length)
            writer.writeString(25, this.package);
        if (this.has_type_override)
            writer.writeEnum(27, this.type_override);
        if (this.has_label_override)
            writer.writeEnum(31, this.label_override);
        if (this.has_sort_by_tag)
            writer.writeBool(28, this.sort_by_tag);
        if (this.has_fallback_type)
            writer.writeEnum(29, this.fallback_type);
        if (this.has_initializer && this.initializer.length)
            writer.writeString(30, this.initializer);
        if (this.has_discard_unused_automatic_types)
            writer.writeBool(33, this.discard_unused_automatic_types);
        if (this.has_discard_deprecated)
            writer.writeBool(35, this.discard_deprecated);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NanoPBOptions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NanoPBOptions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.max_size = reader.readInt32();
                    break;
                case 14:
                    message.max_length = reader.readInt32();
                    break;
                case 2:
                    message.max_count = reader.readInt32();
                    break;
                case 7:
                    message.int_size = reader.readEnum();
                    break;
                case 34:
                    message.enum_intsize = reader.readEnum();
                    break;
                case 3:
                    message.type = reader.readEnum();
                    break;
                case 4:
                    message.long_names = reader.readBool();
                    break;
                case 5:
                    message.packed_struct = reader.readBool();
                    break;
                case 10:
                    message.packed_enum = reader.readBool();
                    break;
                case 6:
                    message.skip_message = reader.readBool();
                    break;
                case 8:
                    message.no_unions = reader.readBool();
                    break;
                case 9:
                    message.msgid = reader.readUint32();
                    break;
                case 11:
                    message.anonymous_oneof = reader.readBool();
                    break;
                case 12:
                    message.proto3 = reader.readBool();
                    break;
                case 21:
                    message.proto3_singular_msgs = reader.readBool();
                    break;
                case 13:
                    message.enum_to_string = reader.readBool();
                    break;
                case 32:
                    message.enum_validate = reader.readBool();
                    break;
                case 15:
                    message.fixed_length = reader.readBool();
                    break;
                case 16:
                    message.fixed_count = reader.readBool();
                    break;
                case 22:
                    message.submsg_callback = reader.readBool();
                    break;
                case 17:
                    message.mangle_names = reader.readEnum();
                    break;
                case 18:
                    message.callback_datatype = reader.readString();
                    break;
                case 19:
                    message.callback_function = reader.readString();
                    break;
                case 20:
                    message.descriptorsize = reader.readEnum();
                    break;
                case 23:
                    message.default_has = reader.readBool();
                    break;
                case 24:
                    pb_1.Message.addToRepeatedField(message, 24, reader.readString());
                    break;
                case 26:
                    pb_1.Message.addToRepeatedField(message, 26, reader.readString());
                    break;
                case 25:
                    message.package = reader.readString();
                    break;
                case 27:
                    message.type_override = reader.readEnum();
                    break;
                case 31:
                    message.label_override = reader.readEnum();
                    break;
                case 28:
                    message.sort_by_tag = reader.readBool();
                    break;
                case 29:
                    message.fallback_type = reader.readEnum();
                    break;
                case 30:
                    message.initializer = reader.readString();
                    break;
                case 33:
                    message.discard_unused_automatic_types = reader.readBool();
                    break;
                case 35:
                    message.discard_deprecated = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): NanoPBOptions {
        return NanoPBOptions.deserialize(bytes);
    }
}
