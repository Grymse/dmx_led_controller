#include <HardwareSerial.h>

void setup() {
  
  // Initialize Serial1 for DMX communication
  // DMX uses 8N2 (8 data bits, no parity, 2 stop bits) at 250000 baud
  Serial1.begin(250000, SERIAL_8N2, 4, -1); // RX on pin 4, no TX pin needed
  
  printf("DMX Signal Test Starting...");
  printf("Listening for DMX data on pin 4");
}

void loop() {
static uint8_t dmxData[512] = {0};
static int dmxIndex = 0;
static bool inFrame = false;

while (Serial1.available()) {
    uint8_t byte = Serial1.read();

    // DMX frame starts with a break (low for at least 88us), which is detected as 0
    // and then a start code (usually 0)
    if (!inFrame) {
        if (byte == 0) { // Possible break/start code
            dmxIndex = 0;
            inFrame = true;
        }
        continue;
    }

    if (dmxIndex < 512) {
        dmxData[dmxIndex++] = byte;
    } else {
        // End of frame
        inFrame = false;
    }
}

printf("Received DMX Data: ");
for (int i = 0; i < 64; ++i) { // Print first 16 channels for brevity
    printf("%d ", dmxData[i]);
}
printf("\n");

// Optionally, print the DMX data for debugging
// for (int i = 0; i < 512; ++i) {
//   printf("%d,", dmxData[i]);
// }
// printf("\n");
  // Small delay to prevent overwhelming the serial output
  delay(1);
}