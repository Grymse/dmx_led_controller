syntax = "proto3";
package protocol;
import 'nanopb.proto';
/**
 * @file protocol.proto
 * @brief Protocol for LED controller communication via Bluetooth gateway
 *
 * Communication Model:
 * - Phone/Computer connects to single ESP32 controller via Bluetooth
 * - Messages received via Bluetooth may be propagated to other controllers via
 * antenna
 * - Antenna broadcasts reach all controllers simultaneously (no mesh routing)
 * - Only the Bluetooth-connected controller decides whether to propagate
 * messages
 */

enum LayerType {
  // Colors
  SingleColor = 0;  // Required: color - represented as uint32 => (0xRRGGBB)
  RainbowColor = 1; // Required: duration, length
  SectionsWaveColor = 2; // Required: colors, duration
  SectionsColor = 3;     // Required: colors, duration
  FadeColor = 4;         // Required: colors, duration
  SwitchColor = 5;       // Required: colors, duration

  // Masks - 50 offset
  BlinkMask = 50;         // Required: sections, duration
  InvertMask = 51;        // Required: none
  PulseSawtoothMask = 52; // Required: gap, duration
  PulseMask = 53;         // Required: gap, duration
  SawtoothMask = 54;      // Required: length, gap, duration
  SectionsWaveMask = 55;  // Required: sections, duration
  SectionsMask = 56;      // Required: sections, duration
  StarsMask = 57;         // Required: frequency, speed, length
  WaveMask = 58;          // Required: length, gap, duration
}

// The request message containing the desired effect and brightness.
message Layer {
  LayerType type = 1;
  uint32 duration = 2;  // Time-based parameter for most layer types
  uint32 length = 3;    // Length parameter for Rainbow, Sawtooth, Stars, Wave
  uint32 color = 4;     // Single color value for SingleColor
  uint32 gap = 5;       // Gap parameter for Pulse, Sawtooth, Wave masks
  uint32 frequency = 6; // Frequency parameter for StarsMask
  uint32 speed = 7;     // Speed parameter for StarsMask
  repeated uint32 colors = 8; // Multiple colors for Fade, SectionsWave, Sections, Switch
  bytes sections = 9; // Section data for Blink, SectionsWave, Sections masks
}

enum Direction {
  FORWARD = 0;
  BACKWARD = 1;
}

// The request message containing an array of effects.
message Animation {
  Direction direction = 1;
  uint32 duration = 2;   // Duration of the animation in ticks.
  uint32 first_tick = 3; // Which tick should the animation start on.
  uint32 brightness = 4;
  repeated Layer layers = 5;
}

message Sequence { repeated Animation animations = 2; }

message Settings {
  uint32 group_id = 1; // Group ID for this controller (used for selective message handling)
  uint32 virtual_offset = 2; // Virtual index of first LED for this controller
}

message BroadcastSequence {
  Sequence sequence = 1; // The sequence to set
  repeated uint32 target_groups = 2; // Groups to execute this sequence on
         // If empty, all groups will execute the sequence
}

message State {
  Sequence sequence = 1; // The current sequence set on the device
  Settings settings = 2; // The current settings of the device
}

message Message {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    Sequence sequence = 1;
    BroadcastSequence broadcast_sequence = 2;
    State save_state = 3;
    bool request_state = 4; // Request the current sequence and settings from the device
    State response_state = 5; // Response with the current sequence and settings from the device
  }
}